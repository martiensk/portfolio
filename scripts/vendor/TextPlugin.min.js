/*
 *!
 * VERSION: 0.5.1
 * DATE: 2014-07-17
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
const _gsScope = typeof module !== 'undefined' && module.exports && typeof global !== 'undefined' ? global : this || window; (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(() => { 'use strict'; var t = function (e) { let i = e.nodeType, r = ''; if (i === 1 || i === 9 || i === 11) { if (typeof e.textContent === 'string') { return e.textContent; } for (e = e.firstChild; e; e = e.nextSibling) { r += t(e); } } else if (i === 3 || i === 4) { return e.nodeValue; } return r; }, e = _gsScope._gsDefine.plugin({propName: 'text', API: 2, version: '0.5.1', init (e, i, r) { let s, n; if (!('innerHTML' in e)) { return !1; } if (this._target = e, typeof i !== 'object' && (i = {value: i}), void 0 === i.value) { return this._text = this._original = [''], !0; } for (this._delimiter = i.delimiter || '', this._original = t(e).replace(/\s+/g, ' ').split(this._delimiter), this._text = i.value.replace(/\s+/g, ' ').split(this._delimiter), this._runBackwards = r.vars.runBackwards === !0, this._runBackwards && (s = this._original, this._original = this._text, this._text = s), typeof i.newClass === 'string' && (this._newClass = i.newClass, this._hasClass = !0), typeof i.oldClass === 'string' && (this._oldClass = i.oldClass, this._hasClass = !0), s = this._original.length - this._text.length, n = s < 0 ? this._original : this._text, this._fillChar = i.fillChar || (i.padSpace ? '&nbsp;' : ''), s < 0 && (s = -s); --s > -1;) { n.push(this._fillChar); } return !0; }, set (t) { t > 1 ? t = 1 : t < 0 && (t = 0), this._runBackwards && (t = 1 - t); let e, i, r, s = this._text.length, n = 0 | t * s + 0.5; this._hasClass ? (e = this._newClass && n !== 0, i = this._oldClass && n !== s, r = (e ? "<span class='" + this._newClass + "'>" : '') + this._text.slice(0, n).join(this._delimiter) + (e ? '</span>' : '') + (i ? "<span class='" + this._oldClass + "'>" : '') + this._delimiter + this._original.slice(n).join(this._delimiter) + (i ? '</span>' : '')) : r = this._text.slice(0, n).join(this._delimiter) + this._delimiter + this._original.slice(n).join(this._delimiter), this._target.innerHTML = this._fillChar === '&nbsp;' && r.indexOf('  ') !== -1 ? r.split('  ').join('&nbsp;&nbsp;') : r; }}), i = e.prototype; i._newClass = i._oldClass = i._delimiter = ''; }), _gsScope._gsDefine && _gsScope._gsQueue.pop()();
